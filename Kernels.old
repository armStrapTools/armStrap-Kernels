#!/bin/bash

#format kernel_name|kernel_type|cpu_type|git_source|git_branch
kernels_lst="sun4i|sunxi|sun4i|https://github.com/linux-sunxi/linux-sunxi.git|sunxi-3.4 sun7i|sunxi|sun7i|https://github.com/linux-sunxi/linux-sunxi.git|sunxi-3.4 sun4i-stage|sunxi|sun4i|https://github.com/linux-sunxi/linux-sunxi.git|stage/sunxi-3.4 sun7i-stage|sunxi|sun7i|https://github.com/linux-sunxi/linux-sunxi.git|stage/sunxi-3.4 sun7i-ct|sunxi-ct|sun7i|https://github.com/armStrapTools/linux-sunxi-ap6210.git|sunxi-3.4 sunxi-next|sunxi|sunxi|https://github.com/linux-sunxi/linux-sunxi.git|sunxi-next mainline|mainline|sunxi|git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git|master"

function listKernels {
  local loc_list=""
  for i in ${kernels_lst}; do
    arr=(${i//|/ })
    loc_list="${loc_list} ${arr[0]}"
  done
  echo "${loc_list%% }"
}

function getSourceType {
  for i in ${kernels_lst}; do
    arr=(${i//|/ })
    if [ "$1" == "${arr[0]}" ]; then
      echo "${arr[1]}"
    fi
  done
}

function getSourceCpu {
  for i in ${kernels_lst}; do
    arr=(${i//|/ })
    if [ "$1" == "${arr[0]}" ]; then
      echo "${arr[2]}"
    fi
  done
}

function getSourceUrl {
  for i in ${kernels_lst}; do
    arr=(${i//|/ })
    if [ "$1" == "${arr[0]}" ]; then
      echo "${arr[3]}"
    fi
  done
}

function getSourceBranch {
  for i in ${kernels_lst}; do
    arr=(${i//|/ })
    if [ "$1" == "${arr[0]}" ]; then
      echo "${arr[4]}"
    fi
  done
}

function gitBranch {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  local loc_brn="$(getSourceBranch $1)"
  if [ ! -z "${loc_brn}" ]; then
    echo "Checking sources for Branch ${loc_brn}"
    (cd "${loc_src}" && git checkout --quiet "${loc_brn}")
  fi
}

function gitPull {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  echo "Updating sources"
  (cd "${loc_src}" && git pull --quiet)
}

function gitClone {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  local loc_url="$(getSourceUrl $1)"
  if [ -z "${loc_url}" ]; then
    echo "no URL to fetch $1."
  else
    echo "Cloning sources"
    git clone --quiet "${loc_url}" "${loc_src}"
    gitBranch "$1"
  fi
}

function gitReset {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  if [ -d "${loc_src}" ]; then
    (cd "${loc_src}" && git reset --quiet --hard @{u})
  fi
}

function getArch {
  /bin/uname -p
}

function isArm {
  if [[ $(/bin/uname -p) == arm* ]]; then
    return 1
  else
    return 0
  fi
}

function makeCommand {
  isArm
  if [ $? -eq 1 ]; then
    /usr/bin/make --quiet $@
  else
    CC=arm-linux-gnueabihf-gcc KBUILD_DEBARCH=armhf dpkg-architecture -tarm-linux-gnueabihf -c /usr/bin/make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- /usr/bin/make --quiet $@
    
  fi
}

function kernelClean {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  if [ ! -z "${loc_type}" ]; then
    if [ -d "${loc_src}" ]; then
      echo "Cleaning ${loc_type}"
      makeCommand -C "${loc_src}" distclean
      gitReset $1
    else
      echo "Source directory for ${loc_type} not found"
    fi
  else
    echo "Unknown source type for $1"
  fi
}

function gitSource {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  local loc_url="$(getSourceUrl $1)"
  
  if [ -z "${loc_src}" ]; then
    return 1
  fi
  
  if [ -d "${loc_src}" ]; then
    kernelClean "$1"
    gitBranch "$1"
    gitPull $1
  else
    if [ -z "${loc_url}" ]; then
      echo "Sources not avalable and no URL to fetch $1."
      return 1
    else
      gitClone $1
    fi
  fi
  
  kernelClean "$1"
  
  return 0
}

function kernelConfig {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  local loc_cfg="armStrap_${loc_type}_defconfig"
  local loc_dft="$1_defconfig"
  local loc_cnf="${PWD}/configs/$loc_cfg"
}

function kernelBuild {
  local loc_type="$(getSourceType $1)"
  local loc_src="${PWD}/src/${loc_type}"
  local loc_cfg="armStrap_${loc_type}_defconfig"
  local loc_cnf="${PWD}/configs/$loc_cfg"
  
  kernelClean $1
  if [ -f "${loc_cnf}" ]; then
    cp "${loc_cnf}" "${loc_src}/arch/arm/configs/"
    makeCommand -C "$loc_cfg"
  elif [ -f "${loc_src}/arch/arm/configs/" ]; then
    echo "bla"
  else
    echo "fi"
  fi
}

#kernelBuild mainline
#exit

for i in $(listKernels); do
  echo "Checking sources for Kernel $i"
  gitSource "$i"
  #kernelBuild
done

#getSourceType sun7i-ct
#getSourceBranch sun7i-ct
#getSourceUrl sun7i-ct

#for i in ${sources_lst}; do echo $i; done
