#!/usr/bin/env python3

import argparse
import atexit
import builtins
import configparser
import crypt
import locale
import syslog
import logging
import os
import sys
import subprocess
import collections 
import re
import shutil

from logging.handlers import SysLogHandler

def writeLog(str):
  logging.warning(str)

# Check if a file exist
def checkFile(file):   
  try:
    if os.path.isfile(file):
      writeLog(file + " exist")
      return True
    else:
      writeLog(file + " does not exist")
      return False
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Check if a directory exist
def checkDirectory(Directory):
  try:
    if os.path.exists(Directory):
      if os.path.isdir(Directory):
        return(True)
    return(False)
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)
    
# Read a config file
def readConfig(configFile):
  try:
    if checkFile(configFile):
      writeLog("Reading configuration file " + configFile)
      config = configparser.ConfigParser()
      config.sections()
      config.read(configFile)
    else:
      writeLog("Configuration file " + configFile + " does not exist")
      config = False
    return config
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# List all kernels configuration.
def showKernels(Kernels):
  try:
    print('{:<8} {:<8} {:<70} {:<16}'.format("Type", "CPU", "Git-URL", "Branch"));
    print('{:-^8} {:-^8} {:-^70} {:-^16}'.format("", "", "", ""));
    for Kernel in Kernels.sections():  
      print('{:<8} {:<8} {:<70} {:<16}'.format(Kernels[Kernel]['type'], Kernels[Kernel]['cpu'], Kernels[Kernel]['git'], Kernels[Kernel]['branch']))
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Update from Git repository.
def gitUpdate(Kernels, Kernel):
  try:
    if checkDirectory(builtins.SrcDir + "/" + Kernels[Kernel]['type']):
      print("Updating sources for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
      return(runCommand("(cd " + builtins.SrcDir + "/" + Kernels[Kernel]['type'] + " && /usr/bin/git pull)"))
    return [1, "Directory not found"]
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Switch repository branch.
def gitBranch(Kernels, Kernel):
  try:
    if checkDirectory(builtins.SrcDir + "/" + Kernels[Kernel]['type']):
      print("Checking out branch " + Kernels[Kernel]['branch'] + " for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
      return(runCommand("(cd " + builtins.SrcDir + "/" + Kernels[Kernel]['type'] + " && /usr/bin/git checkout " + Kernels[Kernel]['branch'] + ")"))
    return [1, "Directory not found"]
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)
    
# Reset to last commit.
def gitReset(Kernels, Kernel):
  try:
    if checkDirectory(builtins.SrcDir + "/" + Kernels[Kernel]['type']):
      print("Resetting sources for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
      return(runCommand("(cd " + builtins.SrcDir + "/" + Kernels[Kernel]['type'] + " && /usr/bin/git fetch origin && /usr/bin/git reset --hard origin/" + Kernels[Kernel]['branch'] + " && /usr/bin/git clean -f -x -d)"))
    return [1, "Directory not found"]
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Clone a repository.    
def gitClone(Kernels, Kernel):
  try:
    if not checkDirectory(builtins.SrcDir + "/" + Kernels[Kernel]['type']):
      print("Cloning sources for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
      print("/usr/bin/git clone " + Kernels[Kernel]['git'] + " " + builtins.SrcDir + "/" + Kernels[Kernel]['type'])
      return(runCommand("/usr/bin/git clone " + Kernels[Kernel]['git'] + " " + builtins.SrcDir + "/" + Kernels[Kernel]['type']))
    return [0, ""]
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Return the system type.    
def systemType():
  try:
    st = runCommand("/bin/uname -p")
    if st[0] == 0:
      return(st[1].splitlines()[0])
    return(False)
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Exeute an external command, capturing its output.
def runCommand(Command, verbose = True):
  try:
    p = subprocess.Popen(Command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True, bufsize=1, shell=True)
    log = ""
    while(True):
      retcode = p.poll()
      line = p.stdout.readline()
      log = log + line
      if verbose:
        sys.stdout.write(line)
      if retcode is not None:
        break
    return [retcode, log]
  except subprocess.CalledProcessError as e:
    return [e.returncode, e.output]
  except SystemExit:  
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Execute a make command in an arm build ready environment
def makeCommand(Kernels, Kernel, Command = False, verbose = True, quiet = False):
  try:
    if checkDirectory(builtins.SrcDir + "/" + Kernels[Kernel]['type']):
      if quiet:
        quiet = " --no-print-directory -s"
      else:
        quiet = ""
      if 'version_prefix' in Kernels[Kernel]:
        extraversion="EXTRAVERSION=-" + Kernels[Kernel]['version_prefix'].lower() + Kernel.lower()
      else:
        extraversion="EXTRAVERSION=-" + Kernel.lower()
      if Command:
        print("Executing make " + Command + " for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
        return(runCommand("CC=arm-linux-gnueabihf-gcc KBUILD_DEBARCH=armhf /usr/bin/dpkg-architecture --host-type arm-linux-gnueabihf --command /usr/bin/make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- " + extraversion + " -j" + builtins.Threads + quiet +" -C " + builtins.SrcDir + "/" + Kernels[Kernel]['type'] + " " + Command, verbose))
      else:
        print("Executing make for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
        return(runCommand("CC=arm-linux-gnueabihf-gcc KBUILD_DEBARCH=armhf /usr/bin/dpkg-architecture --host-type arm-linux-gnueabihf --command /usr/bin/make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- " + extraversion + " -j" + builtins.Threads + quiet +" -C " + builtins.SrcDir + "/" + Kernels[Kernel]['type'], verbose))
  except subprocess.CalledProcessError as e:
    return [e.returncode, e.output]
  except SystemExit:  
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Do a distclean in the kernel sources.
def kernelClean(Kernels, Kernel):
  try:
    print("Cleaning sources for kernel " + Kernel + " (" + Kernels[Kernel]['type'] + ")")
    return(makeCommand(Kernels, Kernel, "distclean"))
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Configure the kernel.
def kernelConfig(Kernels, Kernel):
  try:
    kernelcfg = False
    if 'config' in Kernels[Kernel]:
      if checkFile(builtins.WorkDir + "/" + Kernels[Kernel]['config']):
        kernelcfg = Kernels[Kernel]['config']
    else:
      if checkFile(builtins.WorkDir + "/armStrap_" + Kernel + "_defconfig"):
        kernelcfg = "armStrap_" + Kernel + "_defconfig"
    if kernelcfg:
       shutil.copy(builtins.WorkDir + "/" + kernelcfg, builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/arch/arm/configs/")
    else:
      kernelcfg = Kernels[Kernel]['cpu'] + "_defconfig"
    print("Configuring kernel " + Kernel + " using " + kernelcfg)
    return(makeCommand(Kernels, Kernel, kernelcfg))
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)
    
def patchBuildScript(Kernels, Kernel):
  try:
    if checkFile(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched"):
      return([0, ""])
      os.remove(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched")
    shutil.copy(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb", builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched")
    result = runCommand("/bin/sed -i 's/^libc_headers_packagename=linux-libc-dev.*/libc_headers_packagename=linux-libc-dev-$version/' " +  builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb", verbose = False)
    if result[0] != 0:
      return(result)
    result = runCommand("/bin/sed -i 's/^fwpackagename=linux-firmware-image.*/fwpackagename=linux-firmware-image-$version/' " +  builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb", verbose = False)
    if result[0] != 0:
      return(result)
    return([0, ""])
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

def restoreBuildScript(Kernels, Kernel):
  try:
    if checkFile(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched"):
      os.remove(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb")
      shutil.copy(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched", builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb")
      os.remove(builtins.SrcDir + "/" + Kernels[Kernel]['type'] + "/scripts/package/builddeb.armstrap_patched")
    return([0, ""])
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)

# Get the kernel version
def kernelVersion(Kernels, Kernel):
  try:
    kv = makeCommand(Kernels, Kernel, "kernelrelease", Verbose = False, quiet = True)
    if len(kv) > 1:
      return(kv[1])
    return(False)
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)
    
# Clone / Update and Build kernel Packages.
def buildKernel(Kernels, Kernel):
  try:
    log = ""
    
    #
    # Clean and clone / pull
    #
    
    result = kernelClean(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    result = gitClone(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    result = gitBranch(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    result = gitReset(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    result = gitUpdate(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    #
    # Build the Kernel packages
    #
    
    result = kernelClean(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
    
    result = kernelConfig(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
        
    result = patchBuildScript(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])    
    
    result = makeCommand(Kernels, Kernel, "deb-pkg")
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])
        
    result = restoreBuildScript(Kernels, Kernel)
    if len(result) > 1:
      log = log + result[1]
      if  result[0] != 0:
        return([False, result[0], log])
    else:
      if result[0]:
        return([False, result[0], log])
      else:
        return([False, False, log])    
    
    return([True, 0, log])
  except SystemExit:
    pass
  except:
    logging.exception("Caught Exception")
    sys.exit(os.EX_SOFTWARE)



# Main program
def main():
  version = "1.01"
  builtins.WorkDir = os.getcwd()
  builtins.Config = builtins.WorkDir + "/armStrap-Kernels.ini"
  builtins.SrcDir = builtins.WorkDir + "/src"
  builtins.Threads = "12"
  args = sys.argv[1:]
    
  parser = argparse.ArgumentParser(description=os.path.basename(sys.argv[0]) +" version " + version + ", (C) 2016 Eddy Beaupré", epilog="See https://github.com/armStrapTools for more informations.", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("-c", "--config", help="Specify configuration file", action="store", default = builtins.Config, metavar=('FILE'))
  parser.add_argument("-w", "--workdir", help="Specify work directory", action="store", default = builtins.WorkDir, metavar=('DIRECTORY'))
  parser.add_argument("-s", "--srcdir", help="Specify sources directory", action="store", default = builtins.SrcDir, metavar=('DIRECTORY'))
  #parser.add_argument("-g", "--get", help="Get configuration value", action="store", nargs=2, metavar=('SECTION', 'KEY'))
  #parser.add_argument("-s", "--set", help="Set configuration value", action="store", nargs=3, metavar=('SECTION', 'KEY', 'VALUE'))
  #parser.add_argument("-p", "--cpuinfo", help="Get CPU information", action="store", nargs="?", default=None, const=True, metavar=('SECTION'))
  parser.add_argument("-t", "--test", help="Test command", action="store", nargs=1, metavar=('COMMAND'))
  args = parser.parse_args()
  
  if args.test:
    print("test")
    
  if args.workdir:
    builtins.WorkDir = args.workdir
    builtins.Config = builtins.WorkDir + "/armStrap-Kernels.ini"
    builtins.SrcDir = builtins.WorkDir + "/src"
  
  if args.config:
    builtins.Config = args.config
  
  if args.srcdir:
    builtins.SrcDir = args.srcdir
  
  Kernels=readConfig(builtins.Config)
  
  if not Kernels:
    print("Config file not found")
    sys.exit(os.EX_SOFTWARE)

  if not checkDirectory(builtins.WorkDir):
    print("Work directory not found.")
    sys.exit(os.EX_SOFTWARE)

  if not checkDirectory(builtins.SrcDir):
    print("Source directory not found.")
    sys.exit(os.EX_SOFTWARE)
  
   
  result = buildKernel(Kernels, "sun4i")
  
  if len(result) >= 3:
    if result[0]:
      print("Success")
    else:
      print("Failure : %d" % result[1])
  else:
    print("General Failure")
  
#  print(kernelClean(Kernels, "sun4i"))
#  print(gitClone(Kernels, "sun4i"))
#  print(gitBranch(Kernels, "sun4i"))
#  print(gitReset(Kernels, "sun4i"))
#  print(gitUpdate(Kernels, "sun4i"))
  
#  print(kernelClean(Kernels, "sun4i"))
#  print(kernelConfig(Kernels, "sun4i"))
#  print(makeCommand(Kernels, "sun4i", "deb-pkg"))  
#  print(kernelVersion(Kernels, "sun4i"))
  
  #showKernels(Kernels)
  
#  for Kernel in Kernels.sections():
#    kernelClean(Kernels, Kernel)
#    gitClone(Kernels, Kernel)
#    gitBranch(Kernels, Kernel)
#    gitReset(Kernels, Kernel)
#    kernelClean(Kernels, Kernel)
  
  #  print(gitUpdate(Kernels, Kernel))
  #  print(gitReset(Kernels, Kernel))

# Main body
if __name__ == '__main__':
  syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_SYSLOG)
  syslogger = SysLogHandler(address='/dev/log')
  syslogger.setFormatter(logging.Formatter('%(filename)s[%(process)d] %(levelname)s: %(message)s'))
  logging.getLogger().addHandler(syslogger)
  
  main()
